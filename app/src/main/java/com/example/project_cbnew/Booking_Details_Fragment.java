package com.example.project_cbnew;

import android.app.AlertDialog;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.project_cbnew.adapter.TripDayOverviewAdapter;
import com.example.project_cbnew.hardcodetrip.HardcodedTripProvider;
import com.example.project_cbnew.model.Booking;
import com.example.project_cbnew.model.Stop;
import com.example.project_cbnew.model.Trip;
import com.example.project_cbnew.model.TripDay;
import com.google.android.gms.maps.*;
import com.google.android.gms.maps.model.*;
import com.google.firebase.firestore.FieldPath;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.maps.DirectionsApi;
import com.google.maps.GeoApiContext;
import com.google.maps.model.DirectionsLeg;
import com.google.maps.model.DirectionsResult;
import com.google.maps.model.DirectionsRoute;

import java.util.*;

public class Booking_Details_Fragment extends Fragment {

    private static final String ARG_BOOKING = "booking";
    private Booking booking;
    private MapView mapView;
    private RecyclerView rvTripOverview;
    private static final LatLng COMPANY_LOCATION = new LatLng(13.855969, 100.647614);

    public static Booking_Details_Fragment newInstance(Booking booking) {
        Booking_Details_Fragment fragment = new Booking_Details_Fragment();
        Bundle args = new Bundle();
        args.putParcelable(ARG_BOOKING, booking);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            booking = getArguments().getParcelable(ARG_BOOKING);
        }
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_booking_details, container, false);

        // Views
        TextView tvTripTitle = view.findViewById(R.id.tvTripName);
        TextView tvDateRange = view.findViewById(R.id.tvDateRange);
        TextView tvStart = view.findViewById(R.id.tvStart);
        TextView tvEnd = view.findViewById(R.id.tvEnd);
        TextView tvSeats = view.findViewById(R.id.tvSeats);
        TextView tvVehicle = view.findViewById(R.id.tvType);
        TextView tvDistance = view.findViewById(R.id.tvDistance);
        TextView tvStatus = view.findViewById(R.id.tvBookingStatus);
        TextView tvNote = view.findViewById(R.id.tvNote);
        rvTripOverview = view.findViewById(R.id.rvTripOverview);
        ImageButton btnBack = view.findViewById(R.id.btnBack);
        LinearLayout containerLayout = view.findViewById(R.id.containerLayout); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥

        btnBack.setOnClickListener(v -> requireActivity().getSupportFragmentManager().popBackStack());

        String status = null; //

        if (booking != null) {
            tvTripTitle.setText("üöê ‡∏ó‡∏£‡∏¥‡∏õ: " + booking.getTripTitle());
            tvDateRange.setText("üóì " + booking.getStartDate() + " - " + booking.getEndDate());
            tvStart.setText("üü¢ ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: " + booking.getJourneyStart());
            tvEnd.setText("üî¥ ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: " + booking.getJourneyEnd());
            tvSeats.setText("üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á: " + booking.getSeats());
            tvVehicle.setText("üöê ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: " + booking.getTypeVehicle());
//            tvDistance.setText("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: " + booking.getTotalDistance() + " ‡∏Å‡∏°.");
            tvDistance.setText("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: " +
                    (booking.getTotalDistance() > 0 ? booking.getTotalDistance() : "-") + " ‡∏Å‡∏°.");

            tvNote.setText("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: " + (booking.getNote() == null || booking.getNote().isEmpty() ? "-" : booking.getNote()));

            status = booking.getStatus(); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            tvStatus.setText("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: " + status);

            if ("‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô".equals(status) &&
                    (booking.getDriverRating() == null || booking.getDriverRating() == 0f)) {
                Button btnRate = new Button(getContext());
                btnRate.setText("‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö");
                btnRate.setBackgroundColor(Color.parseColor("#FF9800"));
                btnRate.setTextColor(Color.WHITE);
                btnRate.setPadding(20, 10, 20, 10);
                // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô layout
                if (containerLayout != null) {
                    containerLayout.addView(btnRate);
                }

                btnRate.setOnClickListener(v -> showRatingDialog());
            }

            switch (status) {
                case "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö": tvStatus.setTextColor(Color.parseColor("#FF9800")); break;
                case "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô": tvStatus.setTextColor(Color.parseColor("#2196F3")); break;
                case "‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö": tvStatus.setTextColor(Color.parseColor("#673AB7")); break;
                case "‡∏£‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á/‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á": tvStatus.setTextColor(Color.parseColor("#009688")); break;
                case "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô": tvStatus.setTextColor(Color.parseColor("#4CAF50")); break;
                case "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á": tvStatus.setTextColor(Color.RED); break;
                default: tvStatus.setTextColor(Color.GRAY); break;
            }
        }

        rvTripOverview.setLayoutManager(new LinearLayoutManager(getContext()));

        if (booking != null && booking.getTripId() != null) {
            FirebaseFirestore.getInstance().collection("trips")
                    .whereEqualTo(FieldPath.documentId(), booking.getTripId())
                    .get()
                    .addOnSuccessListener(querySnapshot -> {
                        for (QueryDocumentSnapshot doc : querySnapshot) {
                            Trip trip = Trip.fromFirestore(doc);
                            if (trip != null && trip.getTripDays() != null) {
                                List<TripDay> tripDays = trip.getTripDays();
                                handleTripDaysWithJourneyPoints(tripDays);
                            } else {
                                rvTripOverview.setVisibility(View.GONE);
                            }
                        }
                    });
        } else {
            List<Trip> hardcodedTrips = HardcodedTripProvider.getTrips(getContext());
            for (Trip trip : hardcodedTrips) {
                if (trip.getTitle().equals(booking.getTripTitle())) {
                    handleTripDaysWithJourneyPoints(trip.getTripDays());
                    break;
                }
            }
        }

        Button btnCancel = view.findViewById(R.id.btnCancelBooking);

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        if ("‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö".equals(status) || "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô".equals(status)) {
            btnCancel.setVisibility(View.VISIBLE);

            btnCancel.setOnClickListener(v -> {
                new AlertDialog.Builder(requireContext())
                        .setTitle("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                        .setMessage("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ?")
                        .setPositiveButton("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", (dialog, which) -> {
                            FirebaseFirestore.getInstance()
                                    .collection("bookings")
                                    .document(booking.getBookingId())
                                    .update("status", "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                                    .addOnSuccessListener(unused -> {
                                        Toast.makeText(requireContext(), "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", Toast.LENGTH_SHORT).show();
                                        requireActivity().getSupportFragmentManager()
                                                .beginTransaction()
                                                .replace(R.id.frameLayout, new MyBooking_Fragment())
                                                .commit();
                                    })
                                    .addOnFailureListener(e -> {
                                        Toast.makeText(requireContext(), "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                                    });
                        })
                        .setNegativeButton("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", null)
                        .show();
            });
        }




        return view;
    }

    private void handleTripDaysWithJourneyPoints(List<TripDay> tripDays) {
        for (int i = 0; i < tripDays.size(); i++) {
            TripDay day = tripDays.get(i);
            List<Stop> originalStops = day.getStops();
            List<Stop> visibleStops = new ArrayList<>(originalStops);
            List<Stop> calculationStops = new ArrayList<>();

            // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Stop ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            for (Stop stop : originalStops) {
                if (stop.getLatitude() != null && stop.getLongitude() != null) {
                    calculationStops.add(stop);
                } else {
                    Log.w("SkipStop", "‚ùå ‡∏û‡∏¥‡∏Å‡∏±‡∏î stop ‡πÄ‡∏õ‡πá‡∏ô null ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°: " + stop.getName());
                }
            }

            if (i == 0) {
                calculationStops.add(0, new Stop("üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà", COMPANY_LOCATION.latitude, COMPANY_LOCATION.longitude));

                if (booking.getJourneyStart() != null && !booking.getJourneyStart().trim().isEmpty()) {
                    LatLng latLngStart = MapUtils.getLatLngFromAddress(requireContext(), booking.getJourneyStart());
                    if (latLngStart != null) {
                        Stop startStop = new Stop(booking.getJourneyStart(), "‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", latLngStart.latitude, latLngStart.longitude);
                        if (booking.getTripId() == null) visibleStops.add(0, startStop);
                        calculationStops.add(1, startStop);
                    }
                }
            }

            if (i == tripDays.size() - 1 && booking.getJourneyEnd() != null && !booking.getJourneyEnd().trim().isEmpty()) {
                LatLng latLngEnd = MapUtils.getLatLngFromAddress(requireContext(), booking.getJourneyEnd());
                if (latLngEnd != null) {
                    Stop endStop = new Stop(booking.getJourneyEnd(), "", latLngEnd.latitude, latLngEnd.longitude);

                    boolean isDuplicate = false;
                    if (!calculationStops.isEmpty()) {
                        Stop lastStop = calculationStops.get(calculationStops.size() - 1);
                        if (lastStop.getLatitude() != null && lastStop.getLongitude() != null) {
                            double latDiff = Math.abs(lastStop.getLatitude() - endStop.getLatitude());
                            double lngDiff = Math.abs(lastStop.getLongitude() - endStop.getLongitude());
                            isDuplicate = latDiff < 0.0001 && lngDiff < 0.0001;
                        }
                    }

                    if (!isDuplicate) {
                        visibleStops.add(endStop);
                        calculationStops.add(endStop);
                    }
                }
            }

            day.setStops(visibleStops);
            calculateDayTravelAndRestTime(day, calculationStops);
        }

        TripDayOverviewAdapter adapter = new TripDayOverviewAdapter(tripDays);
        rvTripOverview.setAdapter(adapter);
    }



    private void calculateDayTravelAndRestTime(TripDay tripDay, List<Stop> stopsForCalc) {
        Log.d("TripCalc", "üìÜ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô: " + tripDay.getTitle());

        // ‡πÅ‡∏õ‡∏•‡∏á Stop ‡πÄ‡∏õ‡πá‡∏ô LatLng ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á null
        List<LatLng> rawPoints = new ArrayList<>();
        for (Stop stop : stopsForCalc) {
            if (stop.getLatitude() != null && stop.getLongitude() != null) {
                rawPoints.add(new LatLng(stop.getLatitude(), stop.getLongitude()));
                Log.d("TripCalc", "üìç Raw Point: " + stop.getName() + " (" + stop.getLatitude() + ", " + stop.getLongitude() + ")");
            } else {
                Log.w("TripCalc", "‚ö†Ô∏è ‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î: " + stop.getName());
            }
        }

        // ‚úÖ ‡∏•‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
        List<LatLng> points = new ArrayList<>();
        for (LatLng point : rawPoints) {
            if (points.isEmpty() || !isSameLocation(points.get(points.size() - 1), point)) {
                points.add(point);
            } else {
                Log.w("TripCalc", "‚ö†Ô∏è ‡∏•‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ã‡πâ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô: " + point.latitude + ", " + point.longitude);
            }
        }

        Log.d("TripCalc", "‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏ã‡πâ‡∏≥: " + points.size());

        if (points.size() < 2) {
            Log.w("DirectionSkip", "‚ùå ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ");
            return;
        }

        new Thread(() -> {
            try {
                GeoApiContext geoApiContext = new GeoApiContext.Builder()
                        .apiKey(getString(R.string.google_maps_key))
                        .build();

                com.google.maps.model.LatLng origin = new com.google.maps.model.LatLng(points.get(0).latitude, points.get(0).longitude);
                com.google.maps.model.LatLng destination = new com.google.maps.model.LatLng(points.get(points.size() - 1).latitude, points.get(points.size() - 1).longitude);

                Log.d("TripCalc", "üö¶ Origin: " + origin);
                Log.d("TripCalc", "üèÅ Destination: " + destination);

                if (origin.equals(destination)) {
                    Log.w("DirectionSkip", "‚ùå ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏à‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì");
                    return;
                }

                List<com.google.maps.model.LatLng> waypointList = new ArrayList<>();
                for (int i = 1; i < points.size() - 1; i++) {
                    com.google.maps.model.LatLng waypoint = new com.google.maps.model.LatLng(points.get(i).latitude, points.get(i).longitude);
                    waypointList.add(waypoint);
                    Log.d("TripCalc", "üìå Waypoint: " + waypoint);
                }

                DirectionsResult result = DirectionsApi.newRequest(geoApiContext)
                        .origin(origin)
                        .destination(destination)
                        .waypoints(waypointList.toArray(new com.google.maps.model.LatLng[0]))
                        .await();

                double meters = 0;
                double seconds = 0;

                for (DirectionsRoute route : result.routes) {
                    for (DirectionsLeg leg : route.legs) {
                        meters += leg.distance.inMeters;
                        seconds += leg.duration.inSeconds;

                        Log.d("DayLeg", "From: " + leg.startAddress + " ‚Üí " + leg.endAddress +
                                ", " + leg.distance.humanReadable + ", " + leg.duration.humanReadable);
                    }
                }

                int totalKm = (int) Math.round(meters / 1000);
                int travelMinutes = (int) Math.round(seconds / 60);

                tripDay.setTotalDistanceKm(totalKm);
                tripDay.setTotalTravelMinutes(travelMinutes);

                Log.d("TripCalc", "‚úÖ ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: " + totalKm + " ‡∏Å‡∏°., ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: " + travelMinutes + " ‡∏ô‡∏≤‡∏ó‡∏µ");

                requireActivity().runOnUiThread(() -> {
                    if (rvTripOverview.getAdapter() != null) {
                        rvTripOverview.getAdapter().notifyDataSetChanged();
                    }
                });

            } catch (Exception e) {
                Log.e("DirectionError", "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ç‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: " + e.getMessage());
                e.printStackTrace();
            }
        }).start();
    }


    // üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    private boolean isSameLocation(LatLng a, LatLng b) {
        double threshold = 0.00001; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        return Math.abs(a.latitude - b.latitude) < threshold &&
                Math.abs(a.longitude - b.longitude) < threshold;
    }

    private void showRatingDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
        View dialogView = LayoutInflater.from(getContext()).inflate(R.layout.dialog_rate_driver, null);
        builder.setView(dialogView);

        RatingBar ratingBar = dialogView.findViewById(R.id.ratingBar);
        EditText etReview = dialogView.findViewById(R.id.etReview);

        builder.setTitle("‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö")
                .setPositiveButton("‡∏™‡πà‡∏á", (dialog, which) -> {
                    float rating = ratingBar.getRating();
                    String review = etReview.getText().toString();

                    FirebaseFirestore.getInstance()
                            .collection("bookings")
                            .document(booking.getBookingId())
                            .update("driverRating", rating, "driverReviewNote", review)
                            .addOnSuccessListener(aVoid -> {
                                Toast.makeText(getContext(), "‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", Toast.LENGTH_SHORT).show();

                                // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ MyBooking_Fragment
                                requireActivity().getSupportFragmentManager()
                                        .beginTransaction()
                                        .replace(R.id.frameLayout, new MyBooking_Fragment())
                                        .addToBackStack(null)
                                        .commit();

                            })
                            .addOnFailureListener(e -> {
                                Toast.makeText(getContext(), "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", Toast.LENGTH_SHORT).show();
                            });
                })
                .setNegativeButton("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", null)
                .show();
    }











    @Override public void onResume() { super.onResume(); if (mapView != null) mapView.onResume(); }
    @Override public void onPause() { if (mapView != null) mapView.onPause(); super.onPause(); }
    @Override public void onDestroy() { if (mapView != null) mapView.onDestroy(); super.onDestroy(); }
    @Override public void onLowMemory() { super.onLowMemory(); if (mapView != null) mapView.onLowMemory(); }
}
